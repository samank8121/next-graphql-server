/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Cart: { // root type
    id: number; // Int!
    userId: string; // String!
  }
  Mutation: {};
  Product: { // root type
    caption: string; // String!
    description?: string | null; // String
    id: number; // Int!
    imageSrc?: string | null; // String
    price: number; // Float!
    rate?: number | null; // Int
    slug: string; // String!
    weight: string; // String!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: number; // Int!
    password: string; // String!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Cart: { // field return type
    id: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Mutation: { // field return type
    addProductToCart: NexusGenRootTypes['Cart'] | null; // Cart
    createProduct: NexusGenRootTypes['Product']; // Product!
  }
  Product: { // field return type
    caption: string; // String!
    description: string | null; // String
    id: number; // Int!
    imageSrc: string | null; // String
    price: number; // Float!
    rate: number | null; // Int
    slug: string; // String!
    weight: string; // String!
  }
  Query: { // field return type
    carts: NexusGenRootTypes['Cart'][]; // [Cart!]!
    products: NexusGenRootTypes['Product'][]; // [Product!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    cart: NexusGenRootTypes['Cart']; // Cart!
    email: string; // String!
    id: number; // Int!
    password: string; // String!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Cart: { // field return type name
    id: 'Int'
    user: 'User'
    userId: 'String'
  }
  Mutation: { // field return type name
    addProductToCart: 'Cart'
    createProduct: 'Product'
  }
  Product: { // field return type name
    caption: 'String'
    description: 'String'
    id: 'Int'
    imageSrc: 'String'
    price: 'Float'
    rate: 'Int'
    slug: 'String'
    weight: 'String'
  }
  Query: { // field return type name
    carts: 'Cart'
    products: 'Product'
    users: 'User'
  }
  User: { // field return type name
    cart: 'Cart'
    email: 'String'
    id: 'Int'
    password: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addProductToCart: { // args
      cartId: number; // Int!
      productId: number; // Int!
    }
    createProduct: { // args
      caption: string; // String!
      description?: string | null; // String
      price: number; // Float!
      rate?: number | null; // Int
      slug: string; // String!
      weight: string; // String!
    }
  }
  Query: {
    products: { // args
      slug?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}